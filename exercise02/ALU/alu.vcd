$date
    May 18, 2025  18:02:48
$end
$comment
	SimVision SST: 4c533407f939851cb844a6d0dba1b3d2
$end
$version
    TOOL:	xmsim(64)	22.09-s007
$end
$timescale
    1 fs
$end

$scope module tb_alu $end
$var reg       2 !    instruction [1:0] $end
$var reg      16 "    a [15:0] $end
$var reg      16 #    b [15:0] $end
$var reg      16 $    result [15:0] $end

$scope module uut $end
$var wire      2 %    instruction [1:0] $end
$var wire     16 &    a [15:0] $end
$var wire     16 '    b [15:0] $end
$var reg      16 (    result [15:0] $end
$var reg      16 )    add_out [15:0] $end
$var reg      16 *    sub_out [15:0] $end
$var reg      16 +    encdec_out [15:0] $end
$var reg       1 ,    enc_dec $end

$scope module cbc_inst $end
$var parameter 32 -    n $end
$var parameter 32 .    m $end
$var wire      1 /    enc_dec  $end
$var wire     16 '    message [15:0] $end
$var wire     16 &    key [15:0] $end
$var reg      16 0    result [15:0] $end
$var reg      16 1    block [15:0] $end
$var reg      16 2    prev [15:0] $end
$var reg      16 3    xor_out [15:0] $end
$var integer  32 4    i $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b1 .
b10 -
b0 !
b1010 "
b1111 #
b11001 $
b0 %
b1010 &
b1111 '
b11001 (
b11001 )
b1111111111111011 *
b101 +
0,
0/
b101 0
b1111 1
b1111 2
b101 3
b1 4
$end
#1000
b10011100010000 "
b11111010000 #
b11111010000 '
b10011100010000 &
b10011100010000 2
b0 4
b11111010000 1
b10000011000000 3
b10000011000000 0
b11111010000 2
b1 4
b10111011100000 )
b1111101000000 *
b10111011100000 (
b10111011100000 $
b10000011000000 +
#2000
b1 !
b110010 "
b10100 #
b10100 '
b110010 &
b1 %
b110010 2
b0 4
b10100 1
b100110 3
b100110 0
b10100 2
b1 4
b1000110 )
b11110 *
b11110 (
1,
1/
b110010 2
b0 4
b100110 2
b1 4
b11110 $
b100110 +
#3000
b101110111000 "
b10111011100 #
b10111011100 '
b101110111000 &
b101110111000 2
b0 4
b10111011100 1
b111001100100 3
b111001100100 0
b111001100100 2
b1 4
b1000110010100 )
b10111011100 *
b10111011100 (
b10111011100 $
b111001100100 +
#4000
b10 !
b1010010110100101 "
b1001000110100 #
b1001000110100 '
b1010010110100101 &
b10 %
b1010010110100101 2
b0 4
b1001000110100 1
b1011011110010001 3
b1011011110010001 0
b1011011110010001 2
b1 4
b1011011111011001 )
b1001001101110001 *
b111001100100 (
0,
0/
b1010010110100101 2
b0 4
b1001000110100 2
b1 4
b111001100100 $
b1011011110010001 +
b1011011110010001 (
b1011011110010001 $
#5000
b1111111111111111 "
b1 #
b1 '
b1111111111111111 &
b1111111111111111 2
b0 4
b1 1
b1111111111111110 3
b1111111111111110 0
b1 2
b1 4
b0 )
b1111111111111110 *
b1111111111111110 +
b1111111111111110 (
b1111111111111110 $
#6000
b11 !
b1 "
b1111111111111111 #
b1111111111111111 '
b1 &
b11 %
b0 4
b1111111111111111 1
b1111111111111111 2
b1 4
b10 *
1,
1/
b1 2
b0 4
b1111111111111110 2
b1 4
#7000
b1001000110100 "
b1010010110100101 #
b1010010110100101 '
b1001000110100 &
b1001000110100 2
b0 4
b1010010110100101 1
b1011011110010001 3
b1011011110010001 0
b1011011110010001 2
b1 4
b1011011111011001 )
b110110010001111 *
b1011011110010001 +
b1011011110010001 (
b1011011110010001 $
#8000
