$date
    May 18, 2025  17:24:40
$end
$comment
	SimVision SST: 4c533407f939851cb844a6d0dba1b3d2
$end
$version
    TOOL:	xmsim(64)	22.09-s007
$end
$timescale
    1 fs
$end

$scope module tb_cbc_cipher $end
$var parameter 32 !    n $end
$var parameter 32 "    m $end
$var reg       1 #    enc_dec $end
$var reg      32 $    message [31:0] $end
$var reg      16 %    key [15:0] $end
$var reg      32 &    result [31:0] $end

$scope module uut $end
$var parameter 32 '    n $end
$var parameter 32 (    m $end
$var wire      1 )    enc_dec  $end
$var wire     32 *    message [31:0] $end
$var wire     16 +    key [15:0] $end
$var reg      32 ,    result [31:0] $end
$var reg      16 -    block [15:0] $end
$var reg      16 .    prev [15:0] $end
$var reg      16 /    xor_out [15:0] $end
$var integer  32 0    i $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b10 (
b10 '
b10 "
b10 !
1#
b10001001000100011001101000100 $
b1000100010001 %
b110011011101110010001001010101 &
1)
b10001001000100011001101000100 *
b1000100010001 +
b110011011101110010001001010101 ,
b1000100100010 -
b11001101110111 .
b11001101110111 /
b10 0
$end
#1000
0#
b110011011101110010001001010101 $
b110011011101110010001001010101 *
0)
b1000100010001 .
b0 0
b10001001010101 -
b11001101000100 /
b110011011101110011001101000100 ,
b10001001010101 .
b1 0
b11001101110111 -
b1000100100010 /
b10001001000100011001101000100 ,
b11001101110111 .
b10 0
b10001001000100011001101000100 &
#2000
b10001000100010 %
b10000001000000011000001000000 $
1#
1)
b10000001000000011000001000000 *
b10001000100010 +
b10001000100010 .
b0 0
b11000001000000 -
b1001001100010 /
b10001001000100001001001100010 ,
b1001001100010 .
b1 0
b1000000100000 -
b1001000010 /
b10010000100001001001100010 ,
b1001000010 .
b10 0
b10010000100001001001100010 &
#3000
0#
b10010000100001001001100010 $
b10010000100001001001100010 *
0)
b10001000100010 .
b0 0
b1001001100010 -
b11000001000000 /
b10010000100011000001000000 ,
b1001001100010 .
b1 0
b1001000010 -
b1000000100000 /
b10000001000000011000001000000 ,
b1001000010 .
b10 0
b10000001000000011000001000000 &
#4000
b1001100110011001 %
b10101010101110111100110011011101 $
1#
1)
b10101010101110111100110011011101 *
b1001100110011001 +
b1001100110011001 .
b0 0
b1100110011011101 -
b101010101000100 /
b10000001000000101010101000100 ,
b101010101000100 .
b1 0
b1010101010111011 -
b1111111111111111 /
b11111111111111110101010101000100 ,
b1111111111111111 .
b10 0
b11111111111111110101010101000100 &
#5000
0#
b11111111111111110101010101000100 $
b11111111111111110101010101000100 *
0)
b1001100110011001 .
b0 0
b101010101000100 -
b1100110011011101 /
b11111111111111111100110011011101 ,
b101010101000100 .
b1 0
b1111111111111111 -
b1010101010111011 /
b10101010101110111100110011011101 ,
b1111111111111111 .
b10 0
b10101010101110111100110011011101 &
#6000
b1010101010101010 %
b0 $
1#
1)
b0 *
b1010101010101010 +
b1010101010101010 .
b0 0
b0 -
b1010101010101010 /
b10101010101110111010101010101010 ,
b1 0
b10101010101010101010101010101010 ,
b10 0
b10101010101010101010101010101010 &
#7000
0#
b10101010101010101010101010101010 $
b10101010101010101010101010101010 *
0)
b0 0
b1010101010101010 -
b0 /
b10101010101010100000000000000000 ,
b1 0
b0 ,
b10 0
b0 &
#8000
b1100110011001100 %
b11001001010010011100101001001 $
1#
1)
b11001001010010011100101001001 *
b1100110011001100 +
b1100110011001100 .
b0 0
b11100101001001 -
b1111010110000101 /
b1111010110000101 ,
b1111010110000101 .
b1 0
b1100100101001 -
b1110110010101100 /
b11101100101011001111010110000101 ,
b1110110010101100 .
b10 0
b11101100101011001111010110000101 &
#9000
0#
b11101100101011001111010110000101 $
b11101100101011001111010110000101 *
0)
b1100110011001100 .
b0 0
b1111010110000101 -
b11100101001001 /
b11101100101011000011100101001001 ,
b1111010110000101 .
b1 0
b1110110010101100 -
b1100100101001 /
b11001001010010011100101001001 ,
b1110110010101100 .
b10 0
b11001001010010011100101001001 &
#10000
