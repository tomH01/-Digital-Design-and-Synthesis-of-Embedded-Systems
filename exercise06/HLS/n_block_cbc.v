// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="n_block_cbc_n_block_cbc,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.146833,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=175,HLS_SYN_LUT=1698,HLS_VERSION=2022_2}" *)

module n_block_cbc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        encrypt_decrypt,
        message,
        key,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   encrypt_decrypt;
input  [63:0] message;
input  [31:0] key;
output  [63:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln20_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [63:0] message_read_reg_408;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] encrypt_decrypt_read_reg_414;
wire   [5:0] shl_ln_fu_130_p3;
reg   [5:0] shl_ln_reg_422;
wire   [5:0] upper_fu_138_p2;
reg   [5:0] upper_reg_428;
wire   [5:0] lower_fu_144_p2;
reg   [5:0] lower_reg_437;
wire   [0:0] icmp_ln628_fu_150_p2;
reg   [0:0] icmp_ln628_reg_448;
reg   [63:0] p_Val2_s_fu_66;
wire   [63:0] p_Result_1_fu_367_p2;
reg   [63:0] ap_sig_allocacmp_p_Val2_load;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [31:0] rhs_V_fu_70;
wire   [31:0] select_ln31_fu_250_p3;
reg   [1:0] i_fu_74;
wire   [1:0] i_2_fu_120_p2;
reg   [1:0] ap_sig_allocacmp_i_1;
wire   [0:0] trunc_ln22_fu_126_p1;
wire   [5:0] sub_ln628_fu_176_p2;
wire   [5:0] sub_ln628_1_fu_185_p2;
reg   [63:0] tmp_fu_167_p4;
wire   [5:0] or_ln628_fu_180_p2;
wire   [5:0] select_ln628_fu_189_p3;
wire   [5:0] select_ln628_2_fu_202_p3;
wire   [5:0] xor_ln628_fu_208_p2;
wire   [63:0] select_ln628_1_fu_196_p3;
wire   [63:0] zext_ln628_fu_214_p1;
wire   [63:0] zext_ln628_1_fu_218_p1;
wire   [63:0] lshr_ln628_fu_222_p2;
wire   [63:0] lshr_ln628_1_fu_228_p2;
wire   [63:0] p_Result_s_fu_234_p2;
wire   [31:0] curr_block_fu_240_p1;
wire  signed [31:0] ret_V_fu_244_p2;
wire   [0:0] icmp_ln368_fu_261_p2;
wire   [5:0] or_ln368_fu_265_p2;
wire   [5:0] select_ln368_fu_270_p3;
wire   [5:0] select_ln368_2_fu_282_p3;
wire   [5:0] select_ln368_1_fu_276_p3;
wire   [5:0] xor_ln368_fu_289_p2;
wire  signed [63:0] sext_ln186_fu_257_p1;
wire   [63:0] zext_ln368_fu_295_p1;
wire   [63:0] shl_ln368_fu_307_p2;
reg   [63:0] tmp_2_fu_313_p4;
wire   [63:0] zext_ln368_1_fu_299_p1;
wire   [63:0] zext_ln368_2_fu_303_p1;
wire   [63:0] shl_ln368_1_fu_331_p2;
wire   [63:0] lshr_ln368_fu_337_p2;
wire   [63:0] and_ln368_fu_343_p2;
wire   [63:0] xor_ln368_1_fu_349_p2;
wire   [63:0] select_ln368_3_fu_323_p3;
wire   [63:0] and_ln368_1_fu_355_p2;
wire   [63:0] and_ln368_2_fu_361_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_85;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

n_block_cbc_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((icmp_ln20_fu_114_p2 == 1'd0)) begin
            i_fu_74 <= i_2_fu_120_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_Val2_s_fu_66 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_Val2_s_fu_66 <= p_Result_1_fu_367_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            rhs_V_fu_70 <= key;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            rhs_V_fu_70 <= select_ln31_fu_250_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        encrypt_decrypt_read_reg_414 <= encrypt_decrypt;
        message_read_reg_408 <= message;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_114_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln628_reg_448 <= icmp_ln628_fu_150_p2;
        lower_reg_437 <= lower_fu_144_p2;
        shl_ln_reg_422[5] <= shl_ln_fu_130_p3[5];
        upper_reg_428[5] <= upper_fu_138_p2[5];
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            ap_sig_allocacmp_p_Val2_load = 64'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_p_Val2_load = p_Result_1_fu_367_p2;
        end else begin
            ap_sig_allocacmp_p_Val2_load = p_Val2_s_fu_66;
        end
    end else begin
        ap_sig_allocacmp_p_Val2_load = p_Val2_s_fu_66;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln368_1_fu_355_p2 = (xor_ln368_1_fu_349_p2 & p_Val2_s_fu_66);

assign and_ln368_2_fu_361_p2 = (select_ln368_3_fu_323_p3 & and_ln368_fu_343_p2);

assign and_ln368_fu_343_p2 = (shl_ln368_1_fu_331_p2 & lshr_ln368_fu_337_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_85 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_return = ap_sig_allocacmp_p_Val2_load;

assign curr_block_fu_240_p1 = p_Result_s_fu_234_p2[31:0];

assign i_2_fu_120_p2 = (ap_sig_allocacmp_i_1 + 2'd1);

assign icmp_ln20_fu_114_p2 = ((ap_sig_allocacmp_i_1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_261_p2 = ((lower_reg_437 > upper_reg_428) ? 1'b1 : 1'b0);

assign icmp_ln628_fu_150_p2 = ((lower_fu_144_p2 > upper_fu_138_p2) ? 1'b1 : 1'b0);

assign lower_fu_144_p2 = (shl_ln_fu_130_p3 ^ 6'd32);

assign lshr_ln368_fu_337_p2 = 64'd18446744073709551615 >> zext_ln368_2_fu_303_p1;

assign lshr_ln628_1_fu_228_p2 = 64'd18446744073709551615 >> zext_ln628_1_fu_218_p1;

assign lshr_ln628_fu_222_p2 = select_ln628_1_fu_196_p3 >> zext_ln628_fu_214_p1;

assign or_ln368_fu_265_p2 = (shl_ln_reg_422 | 6'd31);

assign or_ln628_fu_180_p2 = (shl_ln_reg_422 | 6'd31);

assign p_Result_1_fu_367_p2 = (and_ln368_2_fu_361_p2 | and_ln368_1_fu_355_p2);

assign p_Result_s_fu_234_p2 = (lshr_ln628_fu_222_p2 & lshr_ln628_1_fu_228_p2);

assign ret_V_fu_244_p2 = (rhs_V_fu_70 ^ curr_block_fu_240_p1);

assign select_ln31_fu_250_p3 = ((encrypt_decrypt_read_reg_414[0:0] == 1'b1) ? ret_V_fu_244_p2 : curr_block_fu_240_p1);

assign select_ln368_1_fu_276_p3 = ((icmp_ln368_fu_261_p2[0:0] == 1'b1) ? upper_reg_428 : lower_reg_437);

assign select_ln368_2_fu_282_p3 = ((icmp_ln368_fu_261_p2[0:0] == 1'b1) ? or_ln368_fu_265_p2 : lower_reg_437);

assign select_ln368_3_fu_323_p3 = ((icmp_ln368_fu_261_p2[0:0] == 1'b1) ? tmp_2_fu_313_p4 : shl_ln368_fu_307_p2);

assign select_ln368_fu_270_p3 = ((icmp_ln368_fu_261_p2[0:0] == 1'b1) ? lower_reg_437 : upper_reg_428);

assign select_ln628_1_fu_196_p3 = ((icmp_ln628_reg_448[0:0] == 1'b1) ? tmp_fu_167_p4 : message_read_reg_408);

assign select_ln628_2_fu_202_p3 = ((icmp_ln628_reg_448[0:0] == 1'b1) ? or_ln628_fu_180_p2 : lower_reg_437);

assign select_ln628_fu_189_p3 = ((icmp_ln628_reg_448[0:0] == 1'b1) ? sub_ln628_fu_176_p2 : sub_ln628_1_fu_185_p2);

assign sext_ln186_fu_257_p1 = ret_V_fu_244_p2;

assign shl_ln368_1_fu_331_p2 = 64'd18446744073709551615 << zext_ln368_1_fu_299_p1;

assign shl_ln368_fu_307_p2 = sext_ln186_fu_257_p1 << zext_ln368_fu_295_p1;

assign shl_ln_fu_130_p3 = {{trunc_ln22_fu_126_p1}, {5'd0}};

assign sub_ln628_1_fu_185_p2 = (upper_reg_428 - lower_reg_437);

assign sub_ln628_fu_176_p2 = (lower_reg_437 - upper_reg_428);

integer ap_tvar_int_0;

always @ (shl_ln368_fu_307_p2) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_2_fu_313_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_313_p4[ap_tvar_int_0] = shl_ln368_fu_307_p2[63 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (message_read_reg_408) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_fu_167_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_167_p4[ap_tvar_int_1] = message_read_reg_408[63 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln22_fu_126_p1 = ap_sig_allocacmp_i_1[0:0];

assign upper_fu_138_p2 = ($signed(shl_ln_fu_130_p3) + $signed(6'd63));

assign xor_ln368_1_fu_349_p2 = (64'd18446744073709551615 ^ and_ln368_fu_343_p2);

assign xor_ln368_fu_289_p2 = (select_ln368_fu_270_p3 ^ 6'd63);

assign xor_ln628_fu_208_p2 = (select_ln628_fu_189_p3 ^ 6'd63);

assign zext_ln368_1_fu_299_p1 = select_ln368_1_fu_276_p3;

assign zext_ln368_2_fu_303_p1 = xor_ln368_fu_289_p2;

assign zext_ln368_fu_295_p1 = select_ln368_2_fu_282_p3;

assign zext_ln628_1_fu_218_p1 = xor_ln628_fu_208_p2;

assign zext_ln628_fu_214_p1 = select_ln628_2_fu_202_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_422[4:0] <= 5'b00000;
    upper_reg_428[4:0] <= 5'b11111;
end

endmodule //n_block_cbc
