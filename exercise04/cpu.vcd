$date
    May 31, 2025  10:59:56
$end
$comment
	SimVision SST: 4c533407f939851cb844a6d0dba1b3d2
$end
$version
    TOOL:	xmsim(64)	22.09-s007
$end
$timescale
    1 fs
$end

$scope module tb_cpu $end
$var reg       1 !    halt_i $end
$var reg       1 "    clk_i $end
$var reg       1 #    rst_n_i $end
$var reg      32 $    instr_data_i [31:0] $end
$var reg      32 %    instr_mem_addr_o [31:0] $end
$var reg       1 &    instr_mem_addr_valid_o $end
$var reg      32 '    mem_data_i [31:0] $end
$var reg       1 (    mem_data_valid_i $end
$var reg       1 )    mem_write_o $end
$var reg      32 *    mem_data_o [31:0] $end
$var reg      32 +    mem_addr_o [31:0] $end
$var reg       1 ,    error_o $end

$scope module i_dut $end
$var wire      1 -    halt_i  $end
$var wire      1 .    clk_i  $end
$var wire      1 /    rst_n_i  $end
$var wire     32 0    instr_data_i [31:0] $end
$var reg      32 1    instr_mem_addr_o [31:0] $end
$var reg       1 2    instr_mem_addr_valid_o $end
$var wire     32 3    mem_data_i [31:0] $end
$var wire      1 4    mem_data_valid_i  $end
$var reg       1 5    mem_write_o $end
$var reg      32 6    mem_data_o [31:0] $end
$var reg      32 7    mem_addr_o [31:0] $end
$var reg       1 8    error_o $end
$var reg       1 9    halt_w $end
$var reg       1 :    error_w $end
$var reg      32 ;    programm_counter_r [31:0] $end
$var reg      32 <    next_programm_counter_w [31:0] $end
$var reg      32 =    next_program_counter_regular_w [31:0] $end
$var reg      32 >    next_program_counter_jmp_w [31:0] $end
$var reg       1 ?    next_program_counter_sel_w $end
$var reg       7 @    id_opcode [6:0] $end
$var reg       5 A    id_rs1 [4:0] $end
$var reg       5 B    id_rs2 [4:0] $end
$var reg       3 C    id_funct3 [2:0] $end
$var reg       7 D    id_funct7 [6:0] $end
$var reg       5 E    id_rd [4:0] $end
$var reg       1 F    id_rf_rw $end
$var reg      32 G    id_immediate [31:0] $end
$var reg      32 H    rf_data [31:0] $end
$var reg      32 I    rf_data_a [31:0] $end
$var reg      32 J    rf_data_b [31:0] $end
$var reg      32 K    alu_value_b [31:0] $end
$var reg       1 L    alu_zero $end
$var reg      32 M    alu_result [31:0] $end

$scope module instruction_decoder_m $end
$var wire     32 0    instruction_i [31:0] $end
$var reg       7 N    opcode_o [6:0] $end
$var reg       5 O    rs1_o [4:0] $end
$var reg       5 P    rs2_o [4:0] $end
$var reg       3 Q    funct3_o [2:0] $end
$var reg       7 R    funct7_o [6:0] $end
$var reg       5 S    rd_o [4:0] $end
$var reg       1 T    rf_rw_o $end
$var reg       1 U    err_o $end
$var reg      32 V    immediate_o [31:0] $end
$var reg      32 W    unresolved_instruction [31:0] $end
$var reg      32 X    r_type_instruction [31:0] $end
$var reg      32 Y    i_type_instruction [31:0] $end
$var reg      32 Z    s_type_instruction [31:0] $end
$var reg      32 [    u_type_instruction [31:0] $end
$var reg      32 \    i_immediate [31:0] $end
$var reg      32 ]    s_immediate [31:0] $end
$var reg      32 ^    b_immediate [31:0] $end
$var reg      21 _    u_immediate [20:0] $end
$var reg      32 `    j_immediate [31:0] $end
$upscope $end


$scope module register_file_m $end
$var wire      1 .    clk_i  $end
$var wire      1 a    halt_i  $end
$var wire      1 /    rst_n_i  $end
$var wire      1 b    write_enable_i  $end
$var wire     32 c    data_i [31:0] $end
$var wire      5 d    waddr_i [4:0] $end
$var wire      5 e    raddr_a_i [4:0] $end
$var wire      5 f    raddr_b_i [4:0] $end
$var reg      32 g    data_a_o [31:0] $end
$var reg      32 h    data_b_o [31:0] $end
$upscope $end


$scope module alu_m $end
$var wire      7 i    opcode_i [6:0] $end
$var wire     32 j    value_a_i [31:0] $end
$var wire      3 k    funct3_i [2:0] $end
$var wire      7 l    funct7_i [6:0] $end
$var wire     32 m    value_b_i [31:0] $end
$var reg       1 n    zero_o $end
$var reg      32 o    result_o [31:0] $end
$var reg      32 p    imm [31:0] $end
$upscope $end

$upscope $end


$scope module i_data_mem $end
$var wire      1 q    clk_i  $end
$var wire      1 r    rst_n_i  $end
$var wire      1 s    write_enable_i  $end
$var wire     32 t    data_i [31:0] $end
$var wire     32 u    addr_i [31:0] $end
$var reg      32 v    data_o [31:0] $end
$upscope $end


$scope module i_rom $end
$var wire      1 w    clk_i  $end
$var wire      1 x    rst_n_i  $end
$var wire     32 y    addr_i [31:0] $end
$var wire      1 z    addr_valid_i  $end
$var reg      32 {    data_o [31:0] $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
1!
0"
0#
b10100000000000010010011 $
b0 %
1&
b0 '
0(
0)
b0 *
b101 +
0,
1-
0.
0/
b10100000000000010010011 0
b0 1
12
b0 3
04
05
b0 6
b101 7
08
19
0:
b0 ;
b100 <
b100 =
b1010 >
0?
b10011 @
b0 A
b0 B
b0 C
b0 D
b1 E
1F
b101 G
b101 H
b0 I
b0 J
b101 K
0L
b101 M
b10011 N
b0 O
b0 P
b0 Q
b0 R
b1 S
1T
0U
b101 V
b10100000000000010010011 W
b10100000000000010010011 X
b10100000000000010010011 Y
b10100000000000010010011 Z
b10100000000000010010011 [
b101 \
b1 ]
b100000000000 ^
b101000000000 _
b100000000100 `
1a
1b
b101 c
b1 d
b0 e
b0 f
b0 g
b0 h
b10011 i
b0 j
b0 k
b0 l
b101 m
0n
b101 o
b101 p
0q
0r
0s
b0 t
b101 u
b0 v
0w
0x
b0 y
1z
b10100000000000010010011 {
$end
#10000000
1"
1w
1q
1.
#20000000
0"
0w
0q
0.
#30000000
1"
1#
1x
1r
1/
1w
1q
1.
02
b100 1
b100 %
0&
0z
b100 y
#40000000
0"
0w
0q
0.
#50000000
1"
1w
1q
1.
0!
0-
09
12
0a
1&
1z
#60000000
0"
0w
0q
0.
#70000000
1"
1w
1q
1.
b10100000000000100010011 {
b100 ;
b1000 =
b1110 >
b1000 <
b1000 1
b1000 %
b10100000000000100010011 $
b10100000000000100010011 0
b1000 y
b0 ^
b10 ^
b11 ]
b10 ]
b10100000000000100010011 [
b10100000000000100010011 Z
b10100000000000100010011 Y
b10100000000000100010011 X
b10100000000000100010011 W
b10 S
b10 E
b10 d
#80000000
0"
0w
0q
0.
#90000000
1"
1w
1q
1.
b110010011 {
b1000 ;
b1100 =
b10010 >
b1100 <
b1100 1
b1100 %
b110010011 $
b110010011 0
b1100 y
b100 `
b0 `
b0 _
b100000000010 ^
b11 ]
b1 \
b0 \
b100010011 [
b110010011 [
b100010011 Z
b110010011 Z
b100010011 Y
b110010011 Y
b100010011 X
b110010011 X
b100010011 W
b110010011 W
b0 V
b11 S
b11 E
b0 G
b1000 >
b0 K
b0 m
b11 d
b0 p
b0 o
1n
1L
b0 M
b0 H
b0 7
b0 c
b0 +
b0 u
#100000000
0"
0w
0q
0.
#110000000
1"
1w
1q
1.
b1000001100001000110011 {
b1100 ;
b10000 =
b1100 >
b10000 <
b10000 1
b10000 %
b1000001100001000110011 $
b1000001100001000110011 0
b10000 y
b1100000000000000 `
b1100000000000010 `
b10000000000 _
b10000011000 _
b10 ^
b100 ^
b101 ]
b100 ]
b10 \
b1000001100000110010011 [
b1000001100001000010011 [
b1000001100001000110011 [
b1000000000000110010011 Z
b1000001000000110010011 Z
b1000001100000110010011 Z
b1000001100001000010011 Z
b1000001100001000110011 Z
b1000000000000110010011 Y
b1000001000000110010011 Y
b1000001100000110010011 Y
b1000001100001000010011 Y
b1000001100001000110011 Y
b1000000000000110010011 X
b1000001000000110010011 X
b1000001100000110010011 X
b1000001100001000010011 X
b1000001100001000110011 X
b1000001000000110010011 W
b1000001100000110010011 W
b1000001100001000010011 W
b1000001100001000110011 W
b1 O
b10 P
b100 Q
b100 S
b110011 N
b110011 @
b100 E
b100 C
b10 B
b1 A
b1 e
b10 f
b100 k
b100 d
b110011 i
b101 g
b101 h
b101 J
b101 I
b101 K
b101 6
b101 m
b101 j
b1010 p
b101 *
b1010 o
0n
b101 t
0L
b1010 M
b1010 H
b1010 7
b1010 c
b1010 +
b1010 u
#120000000
0"
0w
0q
0.
#130000000
1"
1w
1q
1.
b1100100000010001100011 {
b10000 ;
b10100 =
b10000 >
b10100 <
b10100 1
b10100 %
b1100100000010001100011 $
b1100100000010001100011 0
b10100 y
b100000000000000010 `
b100000100000000010 `
b11000011000 _
b11001000000 _
b1000 ^
b1000 ]
b11 \
b1100100000001000110011 [
b1100100000010000110011 [
b1100100000010001100011 [
b1100001100001000110011 Z
b1100100100001000110011 Z
b1100100000001000110011 Z
b1100100000010000110011 Z
b1100100000010001100011 Z
b1100001100001000110011 Y
b1100100100001000110011 Y
b1100100000001000110011 Y
b1100100000010000110011 Y
b1100100000010001100011 Y
b1100001100001000110011 X
b1100100100001000110011 X
b1100100000001000110011 X
b1100100000010000110011 X
b1100100000010001100011 X
b1100100100001000110011 W
b1100100000001000110011 W
b1100100000010000110011 W
b1100100000010001100011 W
b1000 V
b100 O
b11 P
b0 Q
b0 S
0T
b1100011 N
b1100011 @
0F
b0 E
b0 C
b11 B
b100 A
b1000 G
1?
b100000 >
b100000 <
b100000 1
b100 e
b11 f
b0 k
b0 d
0b
b1100011 i
b100000 %
b1010 g
b0 h
b1 p
b1 o
b100000 y
b1 M
b0 J
b1010 I
b1 H
b1 7
b0 K
b0 6
b0 m
b1 c
b1010 j
b0 p
b0 *
b1 +
b0 o
1n
b1 u
b0 t
1L
b0 M
0?
b0 H
b0 7
b10100 <
b10100 1
b0 c
b10100 %
b0 +
b0 u
b10100 y
#140000000
0"
0w
0q
0.
#150000000
1"
1w
1q
1.
b100000000001010010011 {
b10100 ;
b11000 =
b100100 >
b11000 <
b11000 1
b11000 %
b100000000001010010011 $
b100000000001010010011 0
b11000 y
b100000000010 `
b100000000000 `
b1001000000 _
b1000000000 _
b100000001000 ^
b100000000100 ^
b100 ]
b101 ]
b1 \
b100000000010001100011 [
b100000000001011100011 [
b100000000001010010011 [
b100100000010001100011 Z
b100000000010001100011 Z
b100000000001011100011 Z
b100000000001010010011 Z
b100100000010001100011 Y
b100000000010001100011 Y
b100000000001011100011 Y
b100000000001010010011 Y
b100100000010001100011 X
b100000000010001100011 X
b100000000001011100011 X
b100000000001010010011 X
b100000000010001100011 W
b100000000001011100011 W
b100000000001010010011 W
b1 V
b0 O
b0 P
b101 S
1T
b10011 N
b10011 @
1F
b101 E
b0 B
b0 A
b1 G
b1 K
b10110 >
b1 m
b0 e
b0 f
b101 d
1b
b10011 i
b1011 p
b0 g
b1011 o
0n
0L
b1011 M
b0 I
b1011 H
b1011 7
b1011 c
b0 j
b1 p
b1011 +
b1 o
b1011 u
b1 M
b1 H
b1 7
b1 c
b1 +
b1 u
#160000000
0"
0w
0q
0.
#170000000
1"
1w
1q
1.
b0 {
b11000 ;
b11100 =
b11010 >
b11100 <
b11100 1
b11100 %
b0 $
b0 0
b11100 y
b0 `
b0 _
b100 ^
b0 ^
b1 ]
b0 ]
b0 \
b1010010011 [
b10011 [
b0 [
b1010010011 Z
b10011 Z
b0 Z
b1010010011 Y
b10011 Y
b0 Y
b1010010011 X
b10011 X
b0 X
b1010010011 W
b10011 W
b0 W
b0 V
b0 S
0T
1U
b0 N
b0 @
1:
0F
b0 E
b0 G
b0 K
18
b11000 >
b0 m
b0 d
0b
b0 i
b0 p
1,
b0 o
1n
1L
b0 M
b0 H
b0 7
b0 c
b0 +
b0 u
#180000000
0"
0w
0q
0.
#190000000
1"
